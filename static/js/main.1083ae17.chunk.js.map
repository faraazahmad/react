{"version":3,"sources":["Sidebar.js","ShowContent.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","mode","theme","Item","key","ShowContent","props","state","posts","Axios","get","then","response","setState","data","console","log","catch","error","alert","this","className","map","post","title","id","body","React","Component","Sider","Layout","Content","getUsers","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uLAuBeA,MApBf,WACI,OACE,6BACE,kBAAC,IAAD,CACEC,KAAK,SACLC,MAAM,QACJ,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KAAf,aAGA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,SAGA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,Y,4ECwBGC,EAnCf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHM,EADvB,gEAQyB,IAAD,OAClBC,IAAMC,IAAI,8CACTC,MAAK,SAACC,GACL,EAAKC,SAAS,CAAEL,MAAOI,EAASE,OAChCC,QAAQC,IAAIJ,EAASE,SAEtBG,OAAM,SAACC,GAAYC,MAAMD,QAdhC,+BAiBc,IACHV,EAASY,KAAKb,MAAdC,MACL,OACE,yBAAKa,UAAU,aACb,4BACKb,EAAMc,KAAK,SAAAC,GAAI,OACd,oCACE,kBAAC,IAAD,CAAMF,UAAU,OAAOG,MAAOD,EAAKC,MAAOpB,IAAKmB,EAAKE,IAChDF,EAAKG,gBAzB3B,GAAiCC,IAAMC,WCG/BC,EAAmBC,IAAnBD,MAAOE,EAAYD,IAAZC,QAEf,SAASC,IACPvB,IAAMC,IAAI,8CAA8CC,MAAK,SAACC,GAAD,OAAcA,EAASE,QAcvEmB,MAXf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KACE,kBAACQ,EAAD,KAAO,kBAAC,EAAD,OACP,kBAACE,EAAD,KAAS,kBAAC,EAAD,CAAaC,SAAUA,QCNpBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM+B,a","file":"static/js/main.1083ae17.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu } from 'antd';\n\nfunction Sidebar() {\n    return (\n      <div>\n        <Menu\n          mode=\"inline\"\n          theme=\"dark\">\n            <Menu.Item key=\"1\">\n              Dashboard\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              Posts\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              Users\n            </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n  \nexport default Sidebar;  ","import React from 'react';\nimport Axios from 'axios';\nimport { Card } from 'antd';\n\nexport class ShowContent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          posts: []\n        };\n    }\n\n    componentDidMount() {\n      Axios.get('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => {\n        this.setState({ posts: response.data });\n        console.log(response.data);\n      })\n      .catch((error) => { alert(error) });\n    }\n\n    render() {\n      let {posts} = this.state;\n      return (\n        <div className=\"container\">\n          <ul>\n              {posts.map( post => (\n                <>\n                  <Card className=\"card\" title={post.title} key={post.id}>\n                    { post.body }\n                  </Card>\n                </>\n              ))}\n          </ul>\n        </div>\n        );\n    }\n}\n\nexport default ShowContent;  ","import React from 'react';\nimport Sidebar from './Sidebar';\nimport './App.css';\nimport { Layout } from 'antd';\nimport ShowContent from './ShowContent';\nimport Axios from 'axios';\n\nconst { Sider, Content } = Layout;\n\nfunction getUsers() {\n  Axios.get('https://jsonplaceholder.typicode.com/posts').then((response) => response.data);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Sider><Sidebar/></Sider>\n        <Content><ShowContent getUsers={getUsers} /></Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}